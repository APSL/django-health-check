{"name":"django-health-check","body":"django-health-check\r\n==================\r\n\r\nThis project checks a number of backends, if they are able to connect and do a simple action, e.g. check out the django ORM backend:\r\n\r\n\r\n```python\r\n\r\nclass DjangoDatabaseBackend(BaseHealthCheckBackend):\r\n\r\n    def check_status(self):\r\n        try:\r\n            obj = TestModel.objects.create(title=\"test\")\r\n            obj.title = \"newtest\"\r\n            obj.save()\r\n            obj.delete()\r\n            return HealthCheckStatusType.working\r\n        except IntegrityError:\r\n            return HealthCheckStatusType.unexpected_result\r\n        except DatabaseError:\r\n            return HealthCheckStatusType.unavailable\r\n\r\n```\r\n\r\nThe project is made using some of the same codes, that the django admin site uses - so when you have sucessfully written a new plugin, you register it to the pool, e.g. \r\n\r\n```python\r\nplugin_dir.register(DjangoDatabaseBackend)\r\n```\r\n\r\n\r\nInstalling\r\n==========\r\n\r\nAdd this to urls.py\r\n\r\n```python\r\nurl(r'^ht/', include('health_check.urls'))\r\n```\r\n\r\nAdd required apps:\r\n\r\n```python\r\n    'health_check',\r\n    'health_check_celery',\r\n    'health_check_db',\r\n    'health_check_cache',\r\n    'health_check_storage',\r\n```\r\n(remember to add dependencies, e.g. djcelery - however you should have that already, if you have celery running)","tagline":"a pluggable app that runs a full check on the deployment, using a number of plugins to check e.g. database, queue server, celery processes, etc.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}